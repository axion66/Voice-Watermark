import React, { useState, useEffect } from 'react';
import { motion, AnimatePresence } from 'framer-motion';

function App() {
    const [text, setText] = useState('');
    const [showDetector, setShowDetector] = useState(false);
    const [detectionResult, setDetectionResult] = useState<string | null>(null);
    const [isLoading, setIsLoading] = useState(false);

    useEffect(() => {
        document.body.style.backgroundColor = '#000';
        document.body.style.margin = '0';
        document.body.style.padding = '0';
        document.body.style.fontFamily = '-apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, Helvetica, Arial, sans-serif';
    }, []);

    const downloadAudioFile = async () => {
        if (!text) {
            alert('Please enter some text.');
            return;
        }

        setIsLoading(true);
        try {
            const response = await fetch('http://127.0.0.1:5000/synthesize', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({ text }),
            });

            if (!response.ok) {
                const errorMessage = await response.text();
                throw new Error(`Failed to generate audio: ${errorMessage}`);
            }

            const blob = await response.blob();
            const url = URL.createObjectURL(blob);
            const a = document.createElement('a');
            a.style.display = 'none';
            a.href = url;
            a.download = 'speech.wav';
            document.body.appendChild(a);
            a.click();
            document.body.removeChild(a);
            URL.revokeObjectURL(url);

        } catch (error) {
            console.error('Audio synthesis failed:', error);
            alert('Failed to generate audio file.');
        } finally {
            setIsLoading(false);
        }
    };

    const detectWatermark = async (event: React.ChangeEvent<HTMLInputElement>) => {
        const file = event.target.files?.[0];
        if (!file) return;

        setIsLoading(true);
        const formData = new FormData();
        formData.append('file', file);

        try {
            const response = await fetch('http://127.0.0.1:5001/detect', {
                method: 'POST',
                body: formData,
            });

            if (!response.ok) {
                throw new Error('Detection failed');
            }

            const result = await response.json();
            setDetectionResult(result.is_detected === "-1" ? "No watermark detected!" : "Watermark detected. This audio was generated by us!");
        } catch (error) {
            console.error('Watermark detection failed:', error);
            alert('Failed to detect watermark.');
        } finally {
            setIsLoading(false);
        }
    };

    return (
        <motion.div
            initial={{ opacity: 0 }}
            animate={{ opacity: 1 }}
            exit={{ opacity: 0 }}
            style={{
                display: 'flex',
                flexDirection: 'column',
                alignItems: 'center',
                justifyContent: 'center',
                minHeight: '100vh',
                backgroundColor: '#000',
                color: '#fff',
                padding: '40px',
            }}
        >
            <AnimatePresence mode="wait">
                {!showDetector ? (
                    <motion.div
                        key="tts"
                        initial={{ opacity: 0, y: 50 }}
                        animate={{ opacity: 1, y: 0 }}
                        exit={{ opacity: 0, y: -50 }}
                        transition={{ duration: 0.5 }}
                        style={{ display: 'flex', flexDirection: 'column', alignItems: 'center' }}
                    >
                        <h1 style={{ fontSize: '4rem', marginBottom: '3rem' }}>Text to Speech</h1>
                        <motion.textarea
                            whileFocus={{ scale: 1.02 }}
                            style={{
                                width: '500px',
                                height: '150px',
                                marginBottom: '30px',
                                fontSize: '24px',
                                padding: '15px',
                                borderRadius: '25px',
                                border: 'none',
                                backgroundColor: '#222',
                                color: '#fff',
                                resize: 'none',
                            }}
                            value={text}
                            onChange={(e) => setText(e.target.value)}
                            placeholder="Enter text to convert"
                        />
                        <p style={{ 
                            fontSize: '1rem', 
                            marginBottom: '20px', 
                            color: '#888', 
                            textAlign: 'center',
                            maxWidth: '500px'
                        }}>
                            만들어진 음성은 인간이 들을 수 없는 고유의 워터마크를 가지고 있습니다.
                        </p>
                        <motion.button
                            whileHover={{ scale: 1.05 }}
                            whileTap={{ scale: 0.95 }}
                            style={{
                                width: '300px',
                                height: '60px',
                                margin: '15px',
                                fontSize: '24px',
                                borderRadius: '30px',
                                border: 'none',
                                backgroundColor: '#fff',
                                color: '#000',
                                cursor: 'pointer',
                            }}
                            onClick={downloadAudioFile}
                            disabled={isLoading}
                        >
                            {isLoading ? 'Processing...' : 'Download Audio File'}
                        </motion.button>
                        <motion.button
                            whileHover={{ scale: 1.05 }}
                            whileTap={{ scale: 0.95 }}
                            style={{
                                width: '300px',
                                height: '60px',
                                margin: '15px',
                                fontSize: '24px',
                                borderRadius: '30px',
                                border: '2px solid #fff',
                                backgroundColor: 'transparent',
                                color: '#fff',
                                cursor: 'pointer',
                            }}
                            onClick={() => setShowDetector(true)}
                        >
                            Check Watermark
                        </motion.button>
                    </motion.div>
                ) : (
                    <motion.div
                        key="detector"
                        initial={{ opacity: 0, y: 50 }}
                        animate={{ opacity: 1, y: 0 }}
                        exit={{ opacity: 0, y: -50 }}
                        transition={{ duration: 0.5 }}
                        style={{ display: 'flex', flexDirection: 'column', alignItems: 'center' }}
                    >
                        <h1 style={{ fontSize: '4rem', marginBottom: '3rem' }}>Watermark Detector</h1>
                        <motion.label
                            whileHover={{ scale: 1.05 }}
                            whileTap={{ scale: 0.95 }}
                            style={{
                                width: '300px',
                                height: '60px',
                                margin: '30px',
                                fontSize: '24px',
                                borderRadius: '30px',
                                border: '2px solid #fff',
                                backgroundColor: 'transparent',
                                color: '#fff',
                                cursor: 'pointer',
                                display: 'flex',
                                alignItems: 'center',
                                justifyContent: 'center',
                            }}
                        >
                            Upload Audio File
                            <input
                                type="file"
                                accept=".wav,.mp3"
                                onChange={detectWatermark}
                                style={{ display: 'none' }}
                            />
                        </motion.label>
                        {detectionResult && (
                            <motion.p
                                initial={{ opacity: 0, y: 20 }}
                                animate={{ opacity: 1, y: 0 }}
                                style={{ fontSize: '2rem', marginTop: '30px' }}
                            >
                                {detectionResult}
                            </motion.p>
                        )}
                        <motion.button
                            whileHover={{ scale: 1.05 }}
                            whileTap={{ scale: 0.95 }}
                            style={{
                                width: '300px',
                                height: '60px',
                                margin: '15px',
                                fontSize: '24px',
                                borderRadius: '30px',
                                border: 'none',
                                backgroundColor: '#fff',
                                color: '#000',
                                cursor: 'pointer',
                            }}
                            onClick={() => setShowDetector(false)}
                        >
                            Back to Text to Speech
                        </motion.button>
                    </motion.div>
                )}
            </AnimatePresence>
            {isLoading && (
                <motion.div
                    initial={{ opacity: 0 }}
                    animate={{ opacity: 1 }}
                    exit={{ opacity: 0 }}
                    style={{
                        position: 'fixed',
                        top: 0,
                        left: 0,
                        right: 0,
                        bottom: 0,
                        backgroundColor: 'rgba(0, 0, 0, 0.5)',
                        display: 'flex',
                        alignItems: 'center',
                        justifyContent: 'center',
                    }}
                >
                    <motion.div
                        animate={{ rotate: 360 }}
                        transition={{ duration: 1, repeat: Infinity, ease: 'linear' }}
                        style={{
                            width: '80px',
                            height: '80px',
                            border: '8px solid #fff',
                            borderTopColor: 'transparent',
                            borderRadius: '50%',
                        }}
                    />
                </motion.div>
            )}
        </motion.div>
    );
}

export default App;